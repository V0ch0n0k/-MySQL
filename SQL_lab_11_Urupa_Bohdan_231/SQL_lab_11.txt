/*ЛР №11-…
Проектування БД за індивідуальними завданнями
Виконати системний аналіз вибраної вами предметної області:
1) Зробити опис предметної області – області автоматизації:
a) користувачі та їх вимоги до створюваної автоматизованої системи
b) документи, що циркулюють в предметній області,
c) правила за якими вони формуються
d) описати обмеження на інформацію, що повинна зберігатись в БД
2) Сформувати словник БД .
3) Визначити сутності предметної області, їх атрибути .
4) Визначити зв'язки між сутностями предметної області. Побудувати інфологічну модель.
5) Побудувати таблиці опису та зв’язки між ними. Зробити запити.
*/
DROP DATABASE IF EXISTS dealer_company;
CREATE DATABASE dealer_company;


CREATE TABLE categories(
    id INT(20) NOT NULL AUTO_INCREMENT,
    category VARCHAR(255) NOT NULL,
    
	PRIMARY KEY(id)
);
CREATE TABLE orders (
    id INT(20) NOT NULL AUTO_INCREMENT,
    dealer_company_id INT NOT NULL,
    is_done BIT DEFAULT 0,
    
    PRIMARY KEY(id)
);
CREATE TABLE buyers (
    id INT(20) NOT NULL AUTO_INCREMENT,
    name VARCHAR(30) UNIQUE NOT NULL,
    bank_info VARCHAR(80) UNIQUE NOT NULL,
    
    PRIMARY KEY(id)
);

CREATE TABLE dealer(
    id INT(20) NOT NULL,
    order_num INT(20) NOT NULL,
    name VARCHAR(85) NOT NULL,
    description VARCHAR(150) NOT NULL DEFAULT '',
    buyer INT(20) NOT NULL,
    price FLOAT NOT NULL CHECK (price > 0),
    category INT(20) NOT NULL,
    
    PRIMARY KEY(id),
    
    FOREIGN KEY (category) REFERENCES categories(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (order_num) REFERENCES orders(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (buyer) REFERENCES buyers(id) ON DELETE CASCADE ON UPDATE CASCADE
    
);
INSERT INTO categories (category) VALUES
('Category 1'),
('Category 2'),
('Category 3');

INSERT INTO orders (dealer_company_id, is_done)
VALUES 
(1, 0),
(2, 1),
(3, 0);


INSERT INTO buyers (name, bank_info) 
VALUES 
('Buyer 1', 'Bank info 1'),
('Buyer 2', 'Bank info 2'),
('Buyer 3', 'Bank info 3');


INSERT INTO dealer (id, order_num, name, description, buyer, price, category)
VALUES 
(1, 1, 'Dealer 1', 'Description 1', 1, 10.99, 1),
(2, 2, 'Dealer 2', 'Description 2', 2, 20.99, 2),
(3, 3, 'Dealer 3', 'Description 3', 3, 30.99, 3);




#Тригер для автоматичного оновлення опису, коли встановлюється новий запис
DELIMITER $$
DROP TRIGGER IF EXISTS update_description$$

CREATE TRIGGER update_description
AFTER INSERT ON dealer
FOR EACH ROW
BEGIN
    UPDATE dealer
    SET description = CONCAT('Description: ', NEW.name)
    WHERE id = NEW.id;
END$$
DELIMITER ;

#Тригер для перевірки ціни запчастини перед оновленням запису
DELIMITER $$
DROP TRIGGER IF EXISTS check_price$$

CREATE TRIGGER check_price
BEFORE UPDATE ON dealer
FOR EACH ROW
BEGIN
    IF NEW.price <= 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Price must be greater than 0';
    END IF;
END$$
DELIMITER ;

#Тригер для автоматичного оновлення номера замовлення покупця після оновлення запису
DELIMITER $$
DROP TRIGGER IF EXISTS update_order_number$$

CREATE TRIGGER update_order_number
AFTER UPDATE ON dealer
FOR EACH ROW
BEGIN
    UPDATE buyers
    SET order_num = NEW.order_num
    WHERE id = NEW.buyer;
END$$
DELIMITER ;

#Процедура для створення запису у таблиці dealer
DELIMITER $$
DROP PROCEDURE IF EXISTS InsertDealer$$

CREATE PROCEDURE InsertDealer(IN p_order_num INT, IN p_name VARCHAR(85), IN p_description VARCHAR(150), IN p_buyer INT, IN p_price FLOAT, IN p_category INT)
BEGIN
    INSERT INTO dealer(order_num, name, description, buyer, price, category)
    VALUES (p_order_num, p_name, p_description, p_buyer, p_price, p_category);
END$$
DELIMITER ;


#Процедура для створення нового замовлення
DELIMITER $$
DROP PROCEDURE IF EXISTS create_order$$

CREATE PROCEDURE create_order(
    IN dealer_company_id INT,
    OUT new_order_id INT
)
BEGIN
    DECLARE done_bit BIT DEFAULT 0;
    
    INSERT INTO orders (dealer_company_id, is_done)
    VALUES (dealer_company_id, done_bit);

    SET new_order_id = LAST_INSERT_ID();
END$$

DELIMITER ;
